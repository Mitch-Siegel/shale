#include "riscv.sbh"

u32 fun RISCV_readThreadPointer() asm
{
    // a0 is the the return register for substratum's ABI
    mv a0, tp
}

// TODO: ABI?
u32 fun RISCV_testAndSet(u32 *address, u32 newValue) asm
{
    // callee-save register a1
    addi sp, sp, -8
    sd a1, 0(sp)

    lwu a1, 0(fp) // place address
    lwu a0, 8(fp) // place newValue
    amoswap.w.aq a0, a0, (a1)
    sext.w a0, a0

    // restore callee-saved register a1
    lwu a1, 0(sp)
    addi sp, sp, 4
}

fun RISCV_lockRelease(u32 *address) asm
{
    lwu a0, 0(fp) // place address
    amoswap.w zero, zero, (a0)
}

fun RISCV_synchronize() asm
{
    sfence.vma
};

fun RISCV_writeSatp(u64 newSatp) asm
{
    lwu a0, 0(fp)
    csrw satp, a0
}

u64 fun RISCV_readSie() asm
{
    csrr a0, sie
}

fun RISCV_writeSie(u64 newSie) asm
{
    lwu a0, 0(fp)
    csrw sie, a0
}

fun RISCV_writeMedeleg(u64 newMedeleg) asm
{
    lwu a0, 0(fp)
    csrw medeleg, a0
}

fun RISCV_writeMideleg(u64 newMideleg) asm
{
    lwu a0, 0(fp)
    csrw mideleg, a0
}

fun RISCV_mret() asm
{
    mret
}

u64 fun RISCV_readSstatus() asm
{
    csrr a0, sstatus
}

u64 fun RISCV_writeSstatus(u64 newSstatus) asm
{
    lwu a0, 0(fp)
    csrw sstatus, a0
}

u64 fun RISCV_readSepc() asm
{
    csrr a0, sepc
}

u64 fun RISCV_readScause() asm
{
    csrr a0, scause
}


u8 fun RISCV_intrEnabled()
{
    if((RISCV_readSstatus() & 1) != 0)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

fun RISCV_intrOff()
{
    RISCV_writeSstatus(RISCV_readSstatus() | 1);
}

fun RISCV_intrOn()
{
    RISCV_writeSstatus(RISCV_readSstatus() | 0xFFFFFFFFFFFFFFFE);
}

