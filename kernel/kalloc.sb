#include "kalloc.sbh"
#include "kprintf.sbh"
#include "stdlib.sbh"
#include "macros.sbh"

extern u8 [1]_kernel_end; // first address after the kernel, defined in the linker script link.lds
extern u8 [1]_memory_end; // top of physical memory

class Kpage
{
    Kpage *next;
};

class Kmem
{
    Kpage *freeList;
};

Kmem kmem;


fun kfree(any *physPageAddr)
{
    // TODO: fix this when name for string literals at inner scopes is fixed

    // TODO: page size macro
    // TODO: u64 type?
    if(((u32)physPageAddr % 4096) != 0)
    {
        kpanic("unaligned pa in kfree");
    }

    if(physPageAddr < _kernel_end)
    {
        kpanic("pa < _kernel_end in kfree");
    }

    if(physPageAddr >= 0x8FFFFFFF)
    {
        kpanic("pa >= physical memory limit in kfree");
    }

    // TODO: allow implicit conversion from pointer to any *
    memset((any *)physPageAddr, 1, 4096); // TODO: page size macro

    // TODO: locking
    Kpage *p = physPageAddr;
    p->next = kmem.freeList;
    kmem.freeList = p;
}

any *fun kalloc()
{
    Kpage *p = kmem.freeList;
    if(p != 0) // TODO: NULL
    {
        kmem.freeList = p->next;
    }
    else
    {
        kpanic("no more physical memory available");
    }

    // fill the page with garbage
    memset(p, 0xcd, 4096); // TODO: macro for page size

    return p;
}

// free the physical memory starting at address physStart and ending at physEnd (page align)
fun free_range(any *physStart, any *physEnd)
{
    // TODO: macro for page size
    u8 *pageToFree = PGROUNDDOWN((u8 *)physStart + 4096);
    u64 start = (u64)pageToFree;
    while(pageToFree < physEnd)
    {
        // print progress every MiB 
        if(pageToFree % 0x100000 == 0)
        {
            kputc('\r');
            kputhex(((u64)pageToFree));
        }
        kfree(pageToFree);
        pageToFree += 4096; // TODO: page size macro
    }
}

fun kmeminit()
{
    kputs("marking all physical memory as free...\n");
    
    memset((any *)&kmem, 0, 4); // TODO: sizeof / global variable initialization?
    free_range(_kernel_end, _memory_end); // TODO: macro for top of physical memory (or detect dynamically?)
    kputs(" done - physical memory initialized\n");
}
