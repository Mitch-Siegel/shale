#include "kprintf.sbh"
#include "uart.sbh"

class PrintMutex
{
	Spinlock lock;
	u8 locking;
};

PrintMutex printMutex;


fun kputs(u8 *str)
{
	if(printMutex.locking)
	{
		Spinlock_Acquire(&printMutex.lock);
	}

    while(*str != 0)
    {
        uart_putc_sync(*str);
        str = str + 1;
    }

	if(printMutex.locking)
	{
		Spinlock_Release(&printMutex.lock);
	}
}

fun kputhex(u64 hex)
{
	if(printMutex.locking)
	{
		Spinlock_Acquire(&printMutex.lock);
	}

	uart_putc_sync('0');
	uart_putc_sync('x');
	u8 i = 0;
	while(i < 8)
	{
		u8 thisByte = (hex >> ((7 - i) * 8)) & 255;
		u8 j = 0;
		while(j < 2)
		{
			u8 thisNibble = (thisByte >> ((1 -j) * 4)) & 15;
			if(thisNibble < 10)
			{
				uart_putc_sync('0' + thisNibble);
			}
			else
			{
				uart_putc_sync('A' + (thisNibble- 10));
			}
			j = j + 1;
		}

		i = i + 1;
	}

	if(printMutex.locking)
	{
		Spinlock_Release(&printMutex.lock);
	}
}

fun kputc(u8 c)
{
	if(printMutex.locking)
	{
		Spinlock_Acquire(&printMutex.lock);
	}

    uart_putc_sync(c);

	if(printMutex.locking)
	{
		Spinlock_Release(&printMutex.lock);
	}
}

fun kpanic(u8 *s)
{
	printMutex.locking = 0;
    kputs("panic: ");
    kputs(s);
    kputs("\n");
    u8 panicked = 1; // TODO: make this a global for multicore
    while(panicked != 0)
    {}
}

fun printfInit()
{
	Spinlock_Init(&printMutex.lock, "printf");
	printMutex.locking = 1;
}

