#include "arch/riscv.sbh"
#include "arch/interrupts.sbh"
#include "process/proc.sbh"
#include "textio/kprintf.sbh"

#include "spinlock.sbh"

fun Spinlock_Init(Spinlock *l, u8 *name)
{
    l->locked = 0;
    l->cpu = 0;
    l->name = name;
}

u8 fun Spinlock_Holding(Spinlock *l)
{
    if(l->locked == 0)
    {
        return 0;
    }

    if(l->cpu != myCpu())
    {
        return 0;
    }
    return 1;
}

fun Spinlock_Acquire(Spinlock *l)
{
    push_off();
    // TODO: just compare against the return value
    if(Spinlock_Holding(l) != 0)
    {
        kpanic("attempt to acquire held spinlock");
    }

    while(RISCV_testAndSet(&l->locked, 1) != 0)
    {
    }

    RISCV_synchronize();

    l->cpu = myCpu();
}

fun Spinlock_Release(Spinlock *l)
{
    if(Spinlock_Holding(l) == 0)
    {
        kpanic("attempt to release non-held spinlock");
    }

    l->cpu = 0;
    RISCV_synchronize();

    RISCV_lockRelease(&l->locked);
}
