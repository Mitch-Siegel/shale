#include "process/proc.sbh"
#include "memory/kalloc.sbh"
#include "arch/riscv.sbh"
#include "textio/kprintf.sbh"
#include "generic/macros.sbh"
#include "memory/vm.sbh"

// TODO: define for ncpus
Cpu[4] cpus;
Process[4] processes;

u8 fun cpuid()
{
    return RISCV_readThreadPointer();
}

// Return this CPU's cpu struct.
// Interrupts must be disabled.
Cpu *fun myCpu()
{
    // TODO: u64
    u32 id = cpuid();
    Cpu *c = &cpus[id];
    return c;
}

fun proc_mapstacks(u64 *kernelPageTable)
{
    u8 i = 0;

    while(i < 4)
    {
        Process *p = (processes + i);

        u8 *physicalProcStackAddr = kalloc();
        if(physicalProcStackAddr == 0)
        {
            kpanic("kalloc returned 0");
        }

        u8 *virtualAddress = KSTACK(i);

        // TODO: defines for page size, PTE_R, PTE_W
        kvmmap(kernelPageTable, virtualAddress, physicalProcStackAddr, 4096, 3);

        i += 1;
    }
}
